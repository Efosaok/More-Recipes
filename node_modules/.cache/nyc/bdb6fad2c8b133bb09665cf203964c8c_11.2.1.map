{"version":3,"sources":["recipes.js"],"names":["recipesDatabase","recipes","reviewsDatabase","reviews","idTracker","reviewIdTracker","Recipes","req","res","body","name","category","description","creator","ingredients","currentDate","Date","createdAt","slice","updatedAt","upvotes","downvotes","id","response","push","status","send","message","recipeId","params","isFound","forEach","recipe","parseFloat","splice","error","query","sort","order","allRecipes","a","b","oneRecipe","recipeIsFound"],"mappings":"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","file":"recipes.js","sourceRoot":"C:/Users/efosa/Documents/More-Recipes/Server/controllers","sourcesContent":["import db from '../db/database.json';\r\n\r\nconst recipesDatabase = db.recipes;\r\nconst reviewsDatabase = db.reviews;\r\nlet idTracker = 0;\r\nlet reviewIdTracker = 0;\r\nclass Recipes {\r\n  static addRecipe(req, res) {\r\n    const {\r\n      name,\r\n      category,\r\n      description,\r\n      creator,\r\n      ingredients,\r\n    } = req.body;\r\n    const currentDate = `${new Date()}`;\r\n    const createdAt = currentDate.slice(0, 24);\r\n    const updatedAt = currentDate.slice(0, 24);\r\n    const upvotes = 0;\r\n    const downvotes = 0;\r\n    const reviews = 0;\r\n    idTracker += 1;\r\n    const id = idTracker;\r\n    const response = {\r\n      id,\r\n      name,\r\n      category,\r\n      ingredients,\r\n      creator,\r\n      description,\r\n      createdAt,\r\n      updatedAt,\r\n      upvotes,\r\n      downvotes,\r\n      reviews,\r\n    };\r\n    recipesDatabase.push(response);\r\n    res.status(201).send({ message: 'Recipe Successfully saved and created', response });\r\n  }\r\n\r\n  static deleteRecipe(req, res) {\r\n    const { recipeId } = req.params;\r\n    let isFound = false;\r\n    recipesDatabase.forEach((recipe) => {\r\n      if (recipe.id === parseFloat(recipeId)) {\r\n        recipesDatabase.splice(0, 1);\r\n        isFound = true;\r\n      }\r\n    });\r\n    if (isFound === true) {\r\n      res.status(200).send({ message: 'recipe successfully deleted' });\r\n    } else {\r\n      res.status(400).send({ error: 'recipe you intended to delete does not exist' });\r\n    }\r\n  }\r\n\r\n  static getAllRecipes(req, res) {\r\n    const {\r\n      sort,\r\n      order,\r\n    } = req.query;\r\n    let allRecipes;\r\n    if (sort === 'upvotes' && order === 'des') {\r\n      recipesDatabase.sort((a, b) => {\r\n        allRecipes = b.upvotes - a.upvotes;\r\n        res.status(200).send({ message: 'Success', allRecipes });\r\n      });\r\n    } else {\r\n      res.status(200).send(recipesDatabase);\r\n    }\r\n  }\r\n\r\n  static getARecipe(req, res) {\r\n    const { recipeId } = req.params;\r\n    let isFound = false;\r\n    let oneRecipe;\r\n    recipesDatabase.forEach((recipe) => {\r\n      if (recipe.id === parseFloat(recipeId)) {\r\n        oneRecipe = recipe;\r\n        isFound = true;\r\n      }\r\n    });\r\n    if (isFound) {\r\n      res.status(200).send({ message: 'Success, recipe is found', oneRecipe });\r\n    } else {\r\n      res.status(400).send({ error: 'recipe you intended to find cannot be found' });\r\n    }\r\n  }\r\n\r\n  static postReview(req, res) {\r\n    const currentDate = `${new Date()}`;\r\n    const { reviews } = req.body;\r\n    const { recipeId } = req.params;\r\n    const createdAt = currentDate.slice(0, 24);\r\n    const updatedAt = currentDate.slice(0, 24);\r\n    reviewIdTracker += 1;\r\n    const id = reviewIdTracker;\r\n    const response = {\r\n      id,\r\n      reviews,\r\n      recipeId,\r\n      createdAt,\r\n      updatedAt,\r\n    };\r\n    reviewsDatabase.push(response);\r\n    let isFound = false;\r\n    recipesDatabase.forEach((recipe) => {\r\n      if (recipe.id === parseFloat(recipeId)) {\r\n        recipe.reviews += 1;\r\n        recipe.updatedAt = updatedAt;\r\n        isFound = true;\r\n      }\r\n    });\r\n    if (isFound) {\r\n      res.status(200).send({ message: 'Success, Your review has been saved', response });\r\n    } else {\r\n      res.status(400).send({ message: 'The recipe you intended to review cannot be found' });\r\n    }\r\n  }\r\n\r\n  static modifyRecipe(req, res) {\r\n    const { recipeId } = req.params;\r\n    const currentDate = `${new Date()}`;\r\n    let recipeIsFound = false;\r\n    recipesDatabase.forEach((recipe) => {\r\n      if (recipe.id === parseFloat(recipeId)) {\r\n        recipe.name = req.body.name || recipe.name;\r\n        recipe.category = req.body.category || recipe.category;\r\n        recipe.creator = req.body.creator || recipe.creator;\r\n        recipe.ingredients = req.body.ingredients || recipe.ingredients;\r\n        recipe.updatedAt = currentDate.slice(0, 24);\r\n        recipeIsFound = true;\r\n      }\r\n    });\r\n    if (recipeIsFound) {\r\n      res.status(201).send({ message: 'Success, Your recipe has been updated' });\r\n    } else {\r\n      res.status(400).send({ message: 'The recipe you intended to modify cannot be found' });\r\n    }\r\n  }\r\n\r\n  static upvoteRecipe(req, res) {\r\n    const { recipeId } = req.params;\r\n    const currentDate = `${new Date()}`;\r\n    let isFound = false;\r\n    recipesDatabase.forEach((recipe) => {\r\n      if (recipe.id === parseFloat(recipeId)) {\r\n        recipe.upvotes += 1;\r\n        recipe.updatedAt = currentDate.slice(0, 24);\r\n        isFound = true;\r\n      }\r\n    });\r\n    if (isFound) {\r\n      res.status(200).send({ message: 'Success, You have successfully upvoted the recipe' });\r\n    } else {\r\n      res.status(400).send({ error: 'The recipe you intended to upvote cannot be found' });\r\n    }\r\n  }\r\n\r\n  static downvoteRecipe(req, res) {\r\n    const { recipeId } = req.params;\r\n    const currentDate = `${new Date()}`;\r\n    let isFound = false;\r\n    recipesDatabase.forEach((recipe) => {\r\n      if (recipe.id === parseFloat(recipeId)) {\r\n        recipe.downvotes += 1;\r\n        recipe.updatedAt = currentDate.slice(0, 24);\r\n        isFound = true;\r\n      }\r\n    });\r\n    if (isFound) {\r\n      res.status(200).send({ message: 'Success, You have successfully downvoted the recipe' });\r\n    } else {\r\n      res.status(400).send({ error: 'The recipe you intended to downvote cannot be found' });\r\n    }\r\n  }\r\n}\r\n\r\nexport default Recipes;\r\n"]}