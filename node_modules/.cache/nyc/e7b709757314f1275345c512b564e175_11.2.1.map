{"version":3,"sources":["errors.js"],"names":["alphaNumeric","inputtxt","letterNumber","match","checkNullInput","req","res","next","method","status","send","message","isUndefined","isNull","isWhiteSpace","isString","body","name","category","description","creator","ingredients","forEach","info","undefined","Number","isInteger","parseFloat","replace","length","error","checkInvalidParams","recipeId","params","checkInvalidReview","reviews","review"],"mappings":"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","file":"errors.js","sourceRoot":"C:/Users/efosa/Documents/More-Recipes/Server/middlewares","sourcesContent":["const alphaNumeric = (inputtxt) => {\r\n  const letterNumber = /((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+[0-9a-z]+$/i;\r\n  if (inputtxt.match(letterNumber)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst checkNullInput = (req, res, next) => {\r\n  if (req.method !== 'POST') {\r\n    return res.status(300).send({ message: 'Invalid request method' });\r\n  } else {\r\n    let isUndefined = false;\r\n    let isNull = false;\r\n    let isWhiteSpace = false;\r\n    let isString = true;\r\n    const {\r\n      name,\r\n      category,\r\n      description,\r\n      creator,\r\n      ingredients,\r\n    } = req.body;\r\n    [name, category, description, creator, ingredients].forEach((info) => {\r\n      if (info === undefined) {\r\n        isUndefined = true;\r\n      }\r\n      if (info === '') {\r\n        isNull = true;\r\n      }\r\n      if (!isUndefined && !alphaNumeric(info)) {\r\n        if (Number.isInteger(parseFloat(info))) {\r\n          isString = false;\r\n        }\r\n      }\r\n      if (!isUndefined && typeof info !== 'number') {\r\n        if (info.replace(/\\s/g, '').length === 0) {\r\n          isWhiteSpace = true;\r\n        }\r\n      }\r\n    });\r\n    if (isUndefined) {\r\n      return res.status(400).send({ error: 'Please fill in all fields' });\r\n    }\r\n    if (isNull) {\r\n      return res.status(400).send({ error: 'A field does not contain any input' });\r\n    }\r\n    if (!isString) {\r\n      return res.status(400).send({ error: 'Only texts can be inputed' });\r\n    }\r\n    if (isWhiteSpace) {\r\n      return res.status(400).send({ error: 'Your input should not contain only white-spaces' });\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n};\r\n\r\nconst checkInvalidParams = (req, res, next) => {\r\n  const { recipeId } = req.params;\r\n  if (!Number.isInteger(parseFloat(recipeId))) {\r\n    return res.status(400).send({ error: 'The url is not correct' });\r\n  } else {\r\n    next();\r\n  }\r\n};\r\n\r\nconst checkInvalidReview = (req, res, next) => {\r\n  if (req.method !== 'POST') {\r\n    return res.status(400).send({ error: 'Invalid request method' });\r\n  } else {\r\n    let isUndefined = false;\r\n    let isNull = false;\r\n    const { reviews } = req.body;\r\n    const { recipeId } = req.params;\r\n    [reviews, recipeId].forEach((params) => {\r\n      if (params === undefined) {\r\n        isUndefined = true;\r\n      }\r\n      if (params === '') {\r\n        isNull = true;\r\n      }\r\n    });\r\n    if (isUndefined) {\r\n      return res.status(400).send({ error: 'No review message found' });\r\n    }\r\n    if (isNull) {\r\n      return res.status(400).send({ error: 'Your review cannot be empty text' });\r\n    }\r\n    if (!isUndefined && !alphaNumeric(reviews) && Number.isInteger(parseFloat(reviews))) {\r\n      return res.status(400).send({ error: 'Your reviews should be text and not numbers' });\r\n    }\r\n    if (reviews.replace(/\\s/g, '').length === 0 && typeof review !== 'number') {\r\n      return res.status(400).send({ error: 'Your review message cannot contain only white spaces' });\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  checkNullInput,\r\n  checkInvalidReview,\r\n  checkInvalidParams,\r\n};\r\n"]}