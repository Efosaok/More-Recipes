{"version":3,"sources":["users.js"],"names":["config","Users","secret","process","env","SECRET","console","log","User","req","res","body","email","firstname","lastname","username","hash","password","err","status","send","error","create","then","user","payload","userId","id","token","sign","expiresIn","message","catch","findOne","where","compare","response","identifier"],"mappings":"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","file":"users.js","sourceRoot":"C:/Users/efosa/Documents/More-Recipes/Server/controllers","sourcesContent":["import dotenv from 'dotenv';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport userModels from '../db/models';\r\n\r\ndotenv.config();\r\nconst { Users } = userModels;\r\n\r\nconst secret = process.env.SECRET;\r\nconsole.log(secret);\r\nclass User {\r\n  static signup(req, res) {\r\n    const {\r\n      email,\r\n      firstname,\r\n      lastname,\r\n      username,\r\n    } = req.body;\r\n    bcrypt.hash(req.body.password, 10, (err, hash) => {\r\n      if (err) {\r\n        return res.status(400).send({ error: 'An error occurred' });\r\n      }\r\n      const password = hash;\r\n      return Users\r\n        .create({\r\n          firstname,\r\n          lastname,\r\n          username,\r\n          email,\r\n          password,\r\n        })\r\n        .then((user) => {\r\n          const payload = {\r\n            userId: user.id,\r\n          };\r\n          const token = jwt.sign(payload, secret, {\r\n            expiresIn: '10h', // expires in 1 hours\r\n          });\r\n          res.status(200).send({ message: 'You have successfully signed up', user, token, payload });\r\n        })\r\n        .catch((error) => {\r\n          if (error.message === 'Validation error') {\r\n            res.status(400).send({ error: 'Username or email already exists' });\r\n          } else {\r\n            res.status(400).send({ error: error.message });\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  static signin(req, res) {\r\n    const {\r\n      email,\r\n      password,\r\n    } = req.body;\r\n    return Users\r\n      .findOne({\r\n        where: {\r\n          email,\r\n          password,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        bcrypt.compare(password, user.password, (err, response) => {\r\n          if (response) {\r\n            const payload = {\r\n              userId: user.identifier,\r\n            };\r\n            const token = jwt.sign(payload, secret, {\r\n              expiresIn: '10h', // expires in 1 hours\r\n            });\r\n            res.status(200).send({ message: 'You have successfully logged in', token, payload });\r\n          } else {\r\n            res.status(400);\r\n          }\r\n        });\r\n      })\r\n      .catch(error => res.status(400).send({ error: 'Invalid Username or password' }));\r\n  }\r\n}\r\nexport default User;\r\n"]}