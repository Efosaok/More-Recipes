{"version":3,"sources":["tests.js"],"names":["describe","it","done","get","set","expect","message","tokenGenerated","userInputs","firstname","lastname","username","email","password","confirmpassword","post","send","res","body","to","equal","recipe","name","description","category","ingredients","creator","response","error","undefined","Error","length","oneRecipe","delete","upvotes","downvotes"],"mappings":"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","file":"tests.js","sourceRoot":"C:/Users/efosa/Documents/More-Recipes/Server/test","sourcesContent":["import request from 'supertest';\r\nimport { expect } from 'chai';\r\nimport app from '../server';\r\n\r\ndescribe('test-cases for api routes', () => {\r\n  describe('GET /', () => {\r\n    it('responds with a 200 and welcome message in json', (done) => {\r\n      request(app)\r\n        .get('/')\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, { message: 'Welcome to the beginning of nothingness.' }, done);\r\n    });\r\n  });\r\n\r\n  describe('GET /api', () => {\r\n    it('responds with a 200 and welcome message in json', (done) => {\r\n      request(app)\r\n        .get('/api')\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, { message: 'Welcome to the more-recipes Api' }, done);\r\n    });\r\n  });\r\n\r\n  describe('POST /api/v1/users/signup', () => {\r\n  \tlet tokenGenerated;\r\n    it('creates a new user if all user input is met', (done) => {\r\n      const userInputs = {\r\n        firstname: 'Efosa',\r\n        lastname: 'Okpugie',\r\n        username: 'efosky',\r\n        email: 'efosaokpugie@gmail.com',\r\n        password: 'swampious',\r\n        confirmpassword: 'swampious',\r\n      };\r\n      request(app)\r\n        .post('/api/v1/users/signup')\r\n        .send(userInputs)\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          expect(res.body.message).to.equal('You have successfully signed up');\r\n          expect(res.body.firstname).to.equal(userInputs.firstname);\r\n          expect(res.body.lastname).to.equal(userInputs.lastname);\r\n          expect(res.body.email).to.equal(userInputs.email);\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('POST /api/v1/recipes', () => {\r\n    it('responds with the right reponse when a recipe is created', (done) => {\r\n      const recipe = {\r\n        name: 'Spaked Rosillary Dessert',\r\n        description: 'It is a dessert',\r\n        category: 'Dessert',\r\n        ingredients: 'water and water',\r\n        creator: 'Efosa Okpugie',\r\n      };\r\n      request(app)\r\n        .post('/api/v1/recipes')\r\n        .send(recipe)\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(201, done)\r\n        .expect((res) => {\r\n          const { message } = res.body;\r\n          const { name } = res.body.response;\r\n          expect(message).to.equal('Recipe Successfully saved and created');\r\n          expect(name).to.equal('Spaked Rosillary Dessert');\r\n        });\r\n    });\r\n\r\n    describe('errors are properly handled when a request is made to create a recipe', () => {\r\n      it('responds with the right reponse when some of the request body field is missing', (done) => {\r\n        const recipe = {\r\n          name: 'Spaked Rosillary Dessert',\r\n          description: 'It is a dessert',\r\n          category: 'Dessert',\r\n          ingredients: 'water and water',\r\n        };\r\n        request(app)\r\n          .post('/api/v1/recipes')\r\n          .send(recipe)\r\n          .set('Accept', 'application/json')\r\n          .expect('Content-Type', /json/)\r\n          .expect(400, done)\r\n          .expect((res) => {\r\n            const { error } = res.body;\r\n            if (res.body.name !== undefined) {\r\n              throw new Error('Invalid response');\r\n            }\r\n            expect(error).to.equal('Please fill in all fields');\r\n          });\r\n      });\r\n      it('responds with the right reponse when some request body field is null', (done) => {\r\n        const recipe = {\r\n          name: 'Spaked Rosillary Dessert',\r\n          description: 'It is a dessert',\r\n          category: 'Dessert',\r\n          ingredients: 'water and water',\r\n          creator: '',\r\n        };\r\n        request(app)\r\n          .post('/api/v1/recipes')\r\n          .send(recipe)\r\n          .set('Accept', 'application/json')\r\n          .expect('Content-Type', /json/)\r\n          .expect(400, done)\r\n          .expect((res) => {\r\n            const { error } = res.body;\r\n            expect(error).to.equal('A field does not contain any input');\r\n          });\r\n      });\r\n      it('responds with the right reponse when some request body field contains only whitespaces', (done) => {\r\n        const recipe = {\r\n          name: 'Spaked Rosillary Dessert',\r\n          description: 'It is a dessert',\r\n          category: 'Dessert',\r\n          ingredients: 'water and water',\r\n          creator: '      ',\r\n        };\r\n        request(app)\r\n          .post('/api/v1/recipes')\r\n          .send(recipe)\r\n          .set('Accept', 'application/json')\r\n          .expect('Content-Type', /json/)\r\n          .expect(400, done)\r\n          .expect((res) => {\r\n            const { error } = res.body;\r\n            expect(error).to.equal('Your input should not contain only white-spaces');\r\n          });\r\n      });\r\n      it('responds with the right reponse when some request body field contains only digits', (done) => {\r\n        const recipe = {\r\n          name: 'Spaked Rosillary Dessert',\r\n          description: 'It is a dessert',\r\n          category: 'Dessert',\r\n          ingredients: 'water and water',\r\n          creator: '234',\r\n        };\r\n        request(app)\r\n          .post('/api/v1/recipes')\r\n          .send(recipe)\r\n          .set('Accept', 'application/json')\r\n          .expect('Content-Type', /json/)\r\n          .expect(400, done)\r\n          .expect((res) => {\r\n            const { error } = res.body;\r\n            expect(error).to.equal('Only texts can be inputed');\r\n          });\r\n      });\r\n      it('responds with the right reponse when some request body field is alphanumeric', (done) => {\r\n        const recipe = {\r\n          name: 'Spaked Rosillary Dessert',\r\n          description: 'It is a dessert',\r\n          category: 'Dessert',\r\n          ingredients: 'water and water',\r\n          creator: '3greatchef',\r\n        };\r\n        request(app)\r\n          .post('/api/v1/recipes')\r\n          .send(recipe)\r\n          .set('Accept', 'application/json')\r\n          .expect('Content-Type', /json/)\r\n          .expect(201, done)\r\n          .expect((res) => {\r\n            const { error } = res.body;\r\n            expect(error).to.equal(undefined);\r\n          });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('GET /api/v1/recipes', () => {\r\n  \tit('returns an array of objects of recipes', (done) => {\r\n      request(app)\r\n        .get('/api/v1/recipes')\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          expect(typeof res.body[0].name).to.equal('string');\r\n          expect(res.body[0].name).to.equal('Spaked Rosillary Dessert');\r\n          expect(res.body.length).to.equal(2);\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('GET /api/v1/recipes/<recipeId>', () => {\r\n  \tit('returns just one particular recipe', (done) => {\r\n      request(app)\r\n        .get('/api/v1/recipes/1')\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          expect(typeof res.body.oneRecipe.name).to.equal('string');\r\n          expect(res.body.oneRecipe.name).to.equal('Spaked Rosillary Dessert');\r\n        });\r\n    });\r\n    it('returns an error message when the passed recipe is not in db', (done) => {\r\n      request(app)\r\n        .get('/api/v1/recipes/3')\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(400, done)\r\n        .expect((res) => {\r\n          const { error } = res.body;\r\n          expect(error).to.equal('recipe you intended to find cannot be found');\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('DELETE /api/v1/recipes/<recipeId>', () => {\r\n    it('deletes a recipe from the list of recipes in database', (done) => {\r\n      request(app)\r\n        .delete('/api/v1/recipes/1')\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          expect(res.body.message).to.equal('recipe successfully deleted');\r\n        });\r\n    });\r\n    it('updates the list of recipes in the database upon delete', (done) => {\r\n      request(app)\r\n        .get('/api/v1/recipes')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          expect(res.body.length).to.equal(1);\r\n          expect(res.body[0].creator).to.equal('3greatchef');\r\n        });\r\n    });\r\n    it('returns an error message when the recipe to delete is not in db', (done) => {\r\n      request(app)\r\n        .delete('/api/v1/recipes/1')\r\n        .set('Accept', 'application/json')\r\n        .expect('Content-Type', /json/)\r\n        .expect(400, done)\r\n        .expect((res) => {\r\n          const { error } = res.body;\r\n          expect(error).to.equal('recipe you intended to delete does not exist');\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('POST /api/v1/recipes/<recipeId>/upvote', () => {\r\n  \tit('can upvote a recipe', (done) => {\r\n      request(app)\r\n        .post('/api/v1/recipes/2/upvote')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          const { message } = res.body;\r\n          expect(message).to.equal('Success, You have successfully upvoted the recipe');\r\n        });\r\n    });\r\n    it('responds with an error message if the recipe to upvote is not in db', (done) => {\r\n      request(app)\r\n        .post('/api/v1/recipes/1/upvote')\r\n        .expect('Content-Type', /json/)\r\n        .expect(400, done)\r\n        .expect((res) => {\r\n          const { error } = res.body;\r\n          expect(error).to.equal('The recipe you intended to upvote cannot be found');\r\n        });\r\n    });\r\n    it('updates the count of upvotes on a recipe on upvoting', (done) => {\r\n      request(app)\r\n        .get('/api/v1/recipes')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          const { upvotes } = res.body[0];\r\n          expect(upvotes).to.equal(1);\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('POST /api/v1/recipes/<recipeId>/downvote', () => {\r\n  \tit('can downvote a recipe', (done) => {\r\n      request(app)\r\n        .post('/api/v1/recipes/2/downvote')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          const { message } = res.body;\r\n          expect(message).to.equal('Success, You have successfully downvoted the recipe');\r\n        });\r\n    });\r\n    it('responds with an error message if the recipe to downvote is not in db', (done) => {\r\n      request(app)\r\n        .post('/api/v1/recipes/1/downvote')\r\n        .expect('Content-Type', /json/)\r\n        .expect(400, done)\r\n        .expect((res) => {\r\n          const { error } = res.body;\r\n          expect(error).to.equal('The recipe you intended to downvote cannot be found');\r\n        });\r\n    });\r\n    it('updates the count of downvotes on a recipe on downvoting', (done) => {\r\n      request(app)\r\n        .get('/api/v1/recipes/')\r\n        .expect('Content-Type', /json/)\r\n        .expect(200, done)\r\n        .expect((res) => {\r\n          const { downvotes } = res.body[0];\r\n          expect(downvotes).to.equal(1);\r\n        });\r\n    });\r\n  });\r\n});\r\n"]}